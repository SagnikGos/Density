// src/app/api/auth/[...nextauth]/route.ts
import NextAuth, { NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import GitHubProvider from "next-auth/providers/github";
// Import CredentialsProvider if you still plan to use it
// import CredentialsProvider from "next-auth/providers/credentials";

// Define a type for the user object returned by your backend
interface BackendUser {
  id: string; // This should be your MongoDB _id
  email: string;
  name?: string;
  avatar?: string; // Corresponds to 'image' in NextAuth session user
  username?: string; // If your backend returns it and you want it in the token/session
  token?: string; // <<<< NEW: To hold the JWT generated by your backend
  // Add any other fields your backend returns and you need in the JWT/session
}

/**
 * Configuration options for NextAuth.js.
 */
export const authOptions: NextAuthOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID as string,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,
    }),
    GitHubProvider({
      clientId: process.env.GITHUB_CLIENT_ID as string,
      clientSecret: process.env.GITHUB_CLIENT_SECRET as string,
    }),
    // ... other providers like CredentialsProvider if you use them
  ],

  session: {
    strategy: "jwt",
  },
  

  callbacks: {
    /**
     * The `signIn` callback is called when a user attempts to sign in.
     * We use this to interact with our backend to find or create a user.
     * The `user` object passed here from the provider will be augmented with
     * the `id` (your MongoDB _id) and `backendToken` from your backend.
     */
    async signIn({ user, account, profile }) {
      if (account && (account.provider === "google" || account.provider === "github")) {
        if (!profile?.email) {
          console.error("OAuth profile or email missing for provider:", account.provider, profile);
          return false;
        }

        try {
          const providerUserDetails = {
            email: profile.email,
            name: profile.name || user.name,
            avatar: profile.image || user.image,
            provider: account.provider,
            providerAccountId: user.id, // user.id from OAuth provider
          };

          const backendApiUrl = `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/users/oauth-handler`;
          if (!process.env.NEXT_PUBLIC_BACKEND_URL) {
            console.error("Error: NEXT_PUBLIC_BACKEND_URL is not set. Cannot call backend.");
            return false;
          }

          console.log("[NextAuth SignIn] Calling backend API:", backendApiUrl);
          console.log("[NextAuth SignIn] Sending user details to backend:", providerUserDetails);

          const response = await fetch(backendApiUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(providerUserDetails),
          });

          if (!response.ok) {
            const errorData = await response.text();
            console.error(
              `[NextAuth SignIn] Backend error (status: ${response.status}):`,
              errorData
            );
            return false;
          }

          const backendUser: BackendUser = await response.json();
          console.log("[NextAuth SignIn] Received user from backend:", backendUser);

          if (backendUser && backendUser.id) {
            user.id = backendUser.id; // Your MongoDB _id
            user.email = backendUser.email;
            user.name = backendUser.name;
            user.image = backendUser.avatar;
            (user as any).username = backendUser.username;

            // <<<< NEW: Store the backendToken on the NextAuth user object
            if (backendUser.token) {
              (user as any).backendToken = backendUser.token;
              console.log("[NextAuth SignIn] backendToken stored on user object.");
            } else {
              console.warn("[NextAuth SignIn] Backend did not return a 'token'. Create Post functionality might fail.");
            }
            return true;
          } else {
            console.error("[NextAuth SignIn] Backend did not return a valid user object with an ID.");
            return false;
          }
        } catch (error) {
          console.error("[NextAuth SignIn] Error communicating with backend:", error);
          return false;
        }
      }
      if (account?.provider === "credentials") {
        return true;
      }
      return true;
    },

    /**
     * The `jwt` callback is called whenever a JSON Web Token is created or updated by NextAuth.
     */
    async jwt({ token, user, account, profile }) {
      // The `user` object is only passed on initial sign-in.
      // It contains the fields we augmented in the `signIn` callback (including backendToken).
      if (user) {
        token.id = user.id; // Your MongoDB _id
        token.email = user.email;
        token.name = user.name;
        token.picture = user.image; // NextAuth maps 'picture' to session.user.image
        if ((user as any).username) {
          token.username = (user as any).username;
        }
        // <<<< NEW: Persist backendToken to the NextAuth JWT
        if ((user as any).backendToken) {
          token.backendToken = (user as any).backendToken;
          console.log("[NextAuth JWT] backendToken persisted to NextAuth token.");
        }
      }
      return token;
    },

    /**
     * The `session` callback is called whenever a session is checked by the client.
     * We add the `id` (MongoDB _id) and `backendToken` to the session object.
     */
    async session({ session, token }) {
      if (token && session.user) {
        (session.user as any).id = token.id as string; // Your MongoDB _id
        if (token.username) {
          (session.user as any).username = token.username as string;
        }
        // <<<< NEW: Make backendToken available on the client-side session
        if (token.backendToken) {
          (session.user as any).backendToken = token.backendToken as string;
          console.log("[NextAuth Session] backendToken made available to client session.");
        }
      }
      return session;
    },
  },

  secret: process.env.NEXTAUTH_SECRET,
  debug: process.env.NODE_ENV === "development",
  useSecureCookies: process.env.NODE_ENV === 'production',
  // pages: { signIn: '/login' },
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };
